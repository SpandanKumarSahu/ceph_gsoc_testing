Working of distribution_test.py :
* The program prints the expected weights of the OSDs, given their original weights vs the number of replica counts.
* The number of replica should be less than number of OSDs, hence the limited size of the matrix.
* The program does a linear traversal on the nodes and computes the probability of each node, before finally summing them and normalising them to represent the probability of the OSD being chosen for the given replica_num. For example, the first row represents the expected weight distribution for no replica, the second row represents the expected weight if one replica is to be maintained and so on.


Observations:
1. The ceph cluster is not linear because, the normalised weights of the OSDs are not independent of each other, i.e. the sum of all weights (normalised) of the OSDs, must be 1. If we change the weight of one OSD, we indirectly change the weight of all the other OSDs. That is why the system doesn't behave linearly. Had the normalised weights been independent, the system would have been linear, as shows the maths.

2. Also, the steps are not independent, because there is no point of storing the same object in the same failure domain.

3. Though the distribution is not linear, but it is monotonically increasing and one-one wrt the normalised weight of the OSD.



TODO :
1. Test Loic's algorithm.
2. Run and log multiple tests, across varying weights, and find if it fits a distribution.
3. Try and modify Loic's algorithm or modify the working of PID, to better it, i.e. develop a simulator for it.

